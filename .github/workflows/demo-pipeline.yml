name: Abbott API Demo Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

permissions:
  issues: write
  pull-requests: write
  contents: read

env:
  AZURE_WEBAPP_NAME: 'abbott-api-demo-1755844033'
  AZURE_LOCATION: 'Central India'
  DOTNET_VERSION: '6.0.x'

jobs:
  security-scan:
    name: üîí Security & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore ./src/WeatherAPI/WeatherAPI.csproj
        
      - name: Build for analysis
        run: dotnet build ./src/WeatherAPI/WeatherAPI.csproj --no-restore
        
      - name: Security Audit
        run: |
          echo "üîç Running dependency vulnerability scan..."
          dotnet list ./src/WeatherAPI package --vulnerable --include-transitive || true
          echo "‚úÖ Security scan completed"

  build-and-test:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'push'
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Generate Version
        id: version
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üè∑Ô∏è Build Version: $VERSION"
          
      - name: Restore dependencies
        run: dotnet restore ./src/WeatherAPI/WeatherAPI.csproj
        
      - name: Build
        run: dotnet build ./src/WeatherAPI/WeatherAPI.csproj --no-restore --configuration Release
        
      - name: Run Unit Tests
        run: |
          echo "üß™ Running unit tests..."
          dotnet test ./tests/WeatherAPI.Tests/ --configuration Release --verbosity normal
          echo "‚úÖ All tests passed"
        
      - name: Publish Application
        run: dotnet publish ./src/WeatherAPI/WeatherAPI.csproj -c Release -o ./publish
        
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact-${{ steps.version.outputs.version }}
          path: ./publish

  create-servicenow-cr:
    name: üìã Create ServiceNow Change Request
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event_name == 'pull_request'
    outputs:
      cr-number: ${{ steps.create-cr.outputs.cr-number }}
      cr-sys-id: ${{ steps.create-cr.outputs.cr-sys-id }}
    
    steps:
      - name: Create ServiceNow Change Request
        id: create-cr
        run: |
          echo "Creating ServiceNow Change Request..."
          
          RESPONSE=$(curl -s -X POST \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{
              "short_description": "Deploy Abbott Weather API - PR #${{ github.event.number }}",
              "description": "Automated deployment request\nRepository: ${{ github.repository }}\nPR: ${{ github.event.pull_request.title }}\nBranch: ${{ github.event.pull_request.head.ref }}\nAuthor: ${{ github.event.pull_request.user.login }}\nCommit: ${{ github.event.pull_request.head.sha }}",
              "category": "Software",
              "priority": "3",
              "risk": "3",
              "state": "1",
              "type": "normal",
              "u_commit_sha": "${{ github.event.pull_request.head.sha }}"
            }' \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request")
          
          CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result.number')
          CR_SYS_ID=$(echo "$RESPONSE" | jq -r '.result.sys_id')
          
          echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
          echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
          
          echo "‚úÖ ServiceNow Change Request created: $CR_NUMBER"

          # Add comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"üìã **ServiceNow Change Request Created**\n\n- **Change Request**: [$CR_NUMBER](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=$CR_SYS_ID)\n- **Status**: Waiting for approval\n\nPlease approve in ServiceNow before merging this PR.\"}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"
 
  verify-servicenow-approval:
    name: üìã Verify ServiceNow Approval
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    outputs:
      approved: ${{ steps.check-approval.outputs.approved }}
      cr-number: ${{ steps.check-approval.outputs.cr-number }}
      cr-sys-id: ${{ steps.check-approval.outputs.cr-sys-id }}
    
    steps:
      - name: Check ServiceNow Approval Status
        id: check-approval
        run: |
          echo "üîç Looking for ServiceNow Change Request for this deployment..."
          
          # PRIORITY 1: Search for recent approved CRs for this repository
          # This is more reliable than relying on commit SHA matching
          echo "üîé Searching for recent approved CRs for repository: ${{ github.repository }}"
          
          # Get approved CRs from last 48 hours for this repository
          RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request?sysparm_query=short_descriptionCONTAINSAbbott Weather API^approval=approved^sys_created_on>=javascript:gs.daysAgoStart(2)^ORDERBYDESCsys_created_on&sysparm_limit=5")
          
          CR_COUNT=$(echo "$RESPONSE" | jq '.result | length')
          echo "üìä Found $CR_COUNT approved CR(s) for Abbott Weather API in last 48 hours"
          
          if [ "$CR_COUNT" -gt 0 ]; then
            # Use the most recent approved CR
            CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result[0].number')
            CR_SYS_ID=$(echo "$RESPONSE" | jq -r '.result[0].sys_id')
            APPROVAL=$(echo "$RESPONSE" | jq -r '.result[0].approval')
            CR_STATE=$(echo "$RESPONSE" | jq -r '.result[0].state')
            SHORT_DESC=$(echo "$RESPONSE" | jq -r '.result[0].short_description')
            
            echo "‚úÖ Found approved Change Request: $CR_NUMBER"
            echo "üìù Description: $SHORT_DESC"
            echo "‚úîÔ∏è  Approval Status: $APPROVAL"
            echo "üìä State: $CR_STATE"
            
            # Verify it's actually approved
            if [ "$APPROVAL" = "approved" ]; then
              echo "üéâ ServiceNow approval verified for CR: $CR_NUMBER"
              echo "approved=true" >> $GITHUB_OUTPUT
              echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
              echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
              
              # Update the CR with deployment info
              echo "üìù Updating CR with deployment details..."
              curl -s -X PUT \
                -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
                -H "Content-Type: application/json" \
                -d "{
                  \"u_deployed_commit_sha\": \"${{ github.sha }}\",
                  \"work_notes\": \"Deployment started for commit ${{ github.sha }}\\nBranch: ${GITHUB_REF#refs/heads/}\\nTriggered by: ${{ github.actor }}\\nWorkflow: ${{ github.run_id }}\"
                }" \
                "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/$CR_SYS_ID"
              
              echo "‚úÖ Using approved CR: $CR_NUMBER for deployment"
              
            else
              echo "‚ùå Found CR $CR_NUMBER but it's not approved (status: $APPROVAL)"
              echo "üö® BLOCKING DEPLOYMENT - CR requires approval"
              exit 1
            fi
            
          else
            echo "‚ùå No approved ServiceNow Change Request found for Abbott Weather API"
            echo "üîç Available options:"
            echo "1. Ensure a PR was created and CR was approved"
            echo "2. Check if CR exists but description doesn't match 'Abbott Weather API'"
            echo "3. Verify approval was completed in ServiceNow"
            echo ""
            echo "üö® BLOCKING DEPLOYMENT - No valid approved Change Request found"
            exit 1
          fi
          
          echo "üéØ ServiceNow verification completed successfully!"

  deploy-to-azure:
    name: üöÄ Deploy to Azure App Service
    runs-on: ubuntu-latest
    needs: [build-and-test, verify-servicenow-approval]
    if: github.event_name == 'push' && needs.verify-servicenow-approval.outputs.approved == 'true'
    
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact-${{ needs.build-and-test.outputs.version }}
          path: ./publish
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./publish
          
      - name: Post-Deployment Health Check
        run: |
          echo "üè• Performing post-deployment health check..."
          sleep 15
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "üîç Checking: $HEALTH_URL"
          curl -f "$HEALTH_URL" || echo "Health check endpoint not responding yet"
          echo "‚úÖ Deployment completed"
          
      - name: Update ServiceNow CR Status
        run: |
          echo "üìã Updating ServiceNow CR: ${{ needs.verify-servicenow-approval.outputs.cr-number }}"
          
          # Get current change request data
          CURRENT_CR=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-servicenow-approval.outputs.cr-sys-id }}")
          
          CURRENT_VERSION=$(echo "$CURRENT_CR" | jq -r '.result.sys_mod_count')
          NEW_VERSION=$((CURRENT_VERSION + 1))
          
          # Update ServiceNow change request with deployment status
          UPDATE_RESPONSE=$(curl -s -X PUT \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"state\": \"3\",
              \"work_notes\": \"Deployment completed successfully\\nVersion: ${{ needs.build-and-test.outputs.version }}\\nDeployed to: ${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net\\nDeployment time: $(date -u)\",
              \"sys_mod_count\": \"$NEW_VERSION\"
            }" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-servicenow-approval.outputs.cr-sys-id }}")
          
          if echo "$UPDATE_RESPONSE" | jq -e '.result' > /dev/null; then
            echo "‚úÖ ServiceNow CR updated successfully"
          else
            echo "‚ö†Ô∏è ServiceNow CR update failed, but deployment succeeded"
            echo "Response: $UPDATE_RESPONSE"
          fi

  update-apim:
    name: üåê Update API Management
    runs-on: ubuntu-latest
    needs: deploy-to-azure
    if: github.event_name == 'push'

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Import API to APIM
      run: |
        echo "üåê Importing API to Azure API Management..."
        
        # Import the API from your App Service OpenAPI spec
        az apim api import \
          --api-id "abbott-weather-api" \
          --service-name "abbott-apim-demo" \
          --resource-group "abbott-demo-rg" \
          --specification-format "OpenApi" \
          --specification-url "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger/v1/swagger.json" \
          --path "weather" \
          --display-name "Abbott Weather API" \
          --protocols "https"
          
        echo "‚úÖ API imported to APIM successfully"
        
    - name: APIM Deployment Summary
      run: |
        echo "üéâ API Management Configuration Complete!"
        echo ""
        echo "üîó APIM Gateway URL: https://abbott-apim-demo.azure-api.net/weather"
        echo "üìö Developer Portal: https://abbott-apim-demo.developer.azure-api.net"
        echo ""
        echo "üìã Available Endpoints via APIM:"
        echo "  GET /weather/api/Weather/forecast - Weather forecast"
        echo "  GET /weather/api/Weather/current/{city} - Current weather"
        echo "  GET /weather/api/Weather/test - Test endpoint"

  deployment-summary:
    name: üì¢ Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy-to-azure, update-apim, verify-servicenow-approval, build-and-test]
    if: always() && needs.deploy-to-azure.result == 'success' && github.event_name == 'push'
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Success Notification
        run: |
          echo "üéâ Abbott API Deployment Pipeline Completed Successfully!"
          echo "================================================================"
          echo ""
          echo "üìä Deployment Summary:"
          echo "  üîê Security Scan: ‚úÖ Passed"
          echo "  üî® Build & Test: ‚úÖ Success"
          echo "  üìã ServiceNow CR: ${{ needs.verify-servicenow-approval.outputs.cr-number }}"
          echo "  ‚úÖ ServiceNow Approval: Verified"
          echo "  üöÄ Azure Deployment: Success"
          echo "  üåê APIM Update: Complete"
          echo "  üìù Version: ${{ needs.build-and-test.outputs.version }}"
          echo ""
          echo "üîó Live Endpoints:"
          echo "  üì± Swagger UI: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger"
          echo "  üè• Health Check: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "  üåê API Gateway: https://abbott-apim-demo.azure-api.net/weather"
          echo ""
          echo "üéØ Abbott API Modernization: DEPLOYMENT SUCCESSFUL!"

      - name: Get Extended Deployment Info
        id: extended-info
        run: |
          echo "build-number=${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "commit-sha=${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT
          echo "deploy-time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "version=1.0.${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          
          # Get commit message and author
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          echo "commit-message=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "commit-author=${COMMIT_AUTHOR}" >> $GITHUB_OUTPUT
          
          # Azure resource info
          echo "app-service-url=https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_OUTPUT
          echo "apim-gateway-url=https://abbott-apim-demo.azure-api.net/weather" >> $GITHUB_OUTPUT
          echo "resource-group=abbott-demo-rg" >> $GITHUB_OUTPUT

      - name: Update Confluence Documentation
        run: |
          echo "üìù Updating Confluence documentation..."
          
          # Create credentials for Confluence API
          CONFLUENCE_USER="ahamed.musthafa@agilisium.com"
          CONFLUENCE_TOKEN="${{ secrets.CONFLUENCE_API_TOKEN }}"
          CONFLUENCE_URL="${{ secrets.CONFLUENCE_BASE_URL }}"
          PAGE_ID="${{ secrets.CONFLUENCE_PAGE_ID }}"
          
          # Get current page version
          CURRENT_VERSION=$(curl -s \
            -u "$CONFLUENCE_USER:$CONFLUENCE_TOKEN" \
            "$CONFLUENCE_URL/wiki/rest/api/content/$PAGE_ID?expand=version" \
            | jq '.version.number')
          
          NEW_VERSION=$((CURRENT_VERSION + 1))
          
          # Create Confluence storage format content
          CONFLUENCE_CONTENT='<h1>Abbott Weather API - Deployment Report</h1>
          <h2>Deployment Summary</h2>
          <p><strong>Status:</strong> <span style="color: green;">Completed Successfully</span><br/>
          <strong>Timestamp:</strong> ${{ steps.extended-info.outputs.deploy-time }}<br/>
          <strong>Version:</strong> ${{ steps.extended-info.outputs.version }}<br/>
          <strong>Build Number:</strong> ${{ steps.extended-info.outputs.build-number }}<br/>
          <strong>Deployed by:</strong> ${{ steps.extended-info.outputs.actor }}<br/>
          <strong>ServiceNow CR:</strong> ${{ needs.verify-servicenow-approval.outputs.cr-number }}</p>
          
          <h2>Infrastructure Details</h2>
          <p><strong>App Service:</strong> ${{ env.AZURE_WEBAPP_NAME }}<br/>
          <strong>Region:</strong> Central India<br/>
          <strong>App Service URL:</strong> <a href="${{ steps.extended-info.outputs.app-service-url }}">Live API</a><br/>
          <strong>API Gateway URL:</strong> <a href="${{ steps.extended-info.outputs.apim-gateway-url }}">Gateway</a></p>
          
          <h2>API Endpoints</h2>
          <ul>
          <li><a href="${{ steps.extended-info.outputs.app-service-url }}/health">Health Check</a></li>
          <li><a href="${{ steps.extended-info.outputs.app-service-url }}/swagger">API Documentation</a></li>
          <li><a href="${{ steps.extended-info.outputs.apim-gateway-url }}/api/Weather/forecast">Weather Forecast</a></li>
          <li>Current Weather: ${{ steps.extended-info.outputs.apim-gateway-url }}/api/Weather/current/{city}</li>
          </ul>
          
          <h2>Integration Workflow</h2>
          <p>This deployment followed the complete enterprise workflow:<br/>
          JIRA ‚Üí GitHub PR ‚Üí Security Scan ‚Üí ServiceNow Approval ‚Üí Azure Deployment ‚Üí APIM ‚Üí Documentation</p>
          
          <p><em>Last updated: ${{ steps.extended-info.outputs.deploy-time }} by automated deployment pipeline</em></p>'
          
          # Create JSON payload file to avoid escaping issues
          cat > confluence_payload.json << EOF
          {
            "version": {"number": $NEW_VERSION},
            "title": "Abbott API Documentation",
            "type": "page",
            "body": {
              "storage": {
                "value": $(echo "$CONFLUENCE_CONTENT" | jq -Rs .),
                "representation": "storage"
              }
            }
          }
          EOF
          
          # Update Confluence page
          RESPONSE=$(curl -w "%{http_code}" -s \
            -u "$CONFLUENCE_USER:$CONFLUENCE_TOKEN" \
            -X PUT \
            -H "Content-Type: application/json" \
            -d @confluence_payload.json \
            "$CONFLUENCE_URL/wiki/rest/api/content/$PAGE_ID")
          
          HTTP_CODE="${RESPONSE: -3}"
          if [ "$HTTP_CODE" = "200" ]; then
            echo "‚úÖ Confluence documentation updated successfully"
          else
            echo "‚ö†Ô∏è Confluence update failed but deployment succeeded"
            echo "HTTP code: $HTTP_CODE"
          fi
          
          # Clean up
          rm confluence_payload.json