name: Abbott API Demo Pipeline

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened, closed]

permissions:
  issues: write
  pull-requests: write
  contents: read

env:
  AZURE_WEBAPP_NAME: 'abbott-api-demo-1757046813'
  AZURE_LOCATION: 'Central India'
  DOTNET_VERSION: '6.0.x'

jobs:
  security-scan:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    if: github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Restore dependencies
        run: dotnet restore ./src/WeatherAPI/WeatherAPI.csproj
        
      - name: Build for analysis
        run: dotnet build ./src/WeatherAPI/WeatherAPI.csproj --no-restore
        
      - name: Security Audit
        run: |
          echo "Running dependency vulnerability scan..."
          dotnet list ./src/WeatherAPI package --vulnerable --include-transitive || true
          echo "Security scan completed"

  create-servicenow-cr:
    name: Create ServiceNow Change Request
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    outputs:
      cr-number: ${{ steps.create-cr.outputs.cr-number }}
      cr-sys-id: ${{ steps.create-cr.outputs.cr-sys-id }}
    
    steps:
      - name: Create ServiceNow Change Request
        id: create-cr
        run: |
          echo "Creating ServiceNow Change Request..."
          
          RESPONSE=$(curl -s -X POST \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d '{
              "short_description": "Deploy Abbott Weather API - PR #${{ github.event.number }}",
              "description": "Automated deployment request\nRepository: ${{ github.repository }}\nPR: ${{ github.event.pull_request.title }}\nBranch: ${{ github.event.pull_request.head.ref }}\nAuthor: ${{ github.event.pull_request.user.login }}\nCommit: ${{ github.event.pull_request.head.sha }}\nPR URL: ${{ github.event.pull_request.html_url }}",
              "category": "Software",
              "priority": "3",
              "risk": "3",
              "state": "1",
              "type": "normal",
              "u_commit_sha": "${{ github.event.pull_request.head.sha }}",
              "u_pr_number": "${{ github.event.number }}"
            }' \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request")
          
          CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result.number')
          CR_SYS_ID=$(echo "$RESPONSE" | jq -r '.result.sys_id')
          
          echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
          echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
          
          echo "ServiceNow Change Request created: $CR_NUMBER"

          # Add comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"ServiceNow Change Request Created\n\n- **Change Request**: [$CR_NUMBER](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=$CR_SYS_ID)\n- **Status**: Waiting for approval\n\nPlease approve in ServiceNow before merging this PR.\"}" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"

  verify-and-deploy:
    name: Verify Approval & Deploy
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    outputs:
      cr-number: ${{ steps.verify-approval.outputs.cr-number }}
      cr-sys-id: ${{ steps.verify-approval.outputs.cr-sys-id }}
      approved: ${{ steps.verify-approval.outputs.approved }}
      version: ${{ steps.build.outputs.version }}
    
    steps:
      - name: Verify ServiceNow Approval
        id: verify-approval
        run: |
          echo "Verifying ServiceNow approval for PR #${{ github.event.number }}..."
          
          # Search for CR by PR number with more specific query
          RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request?sysparm_query=u_pr_number=${{ github.event.number }}^short_descriptionCONTAINSPR%20%23${{ github.event.number }}^ORDERBYDESCsys_created_on&sysparm_limit=1")
          
          CR_COUNT=$(echo "$RESPONSE" | jq '.result | length')
          echo "Found $CR_COUNT CR(s) for PR #${{ github.event.number }}"
          
          if [ "$CR_COUNT" -gt 0 ]; then
            CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result[0].number')
            CR_SYS_ID=$(echo "$RESPONSE" | jq -r '.result[0].sys_id')
            CR_STATE=$(echo "$RESPONSE" | jq -r '.result[0].state')
            
            echo "Found Change Request: $CR_NUMBER"
            echo "State: $CR_STATE"
            
            # Check approvals for this CR
            APPROVAL_RESPONSE=$(curl -s \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/sysapproval_approver?sysparm_query=document_id=$CR_SYS_ID")
            
            APPROVAL_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '.result | length')
            echo "Found $APPROVAL_COUNT approval record(s)"
            
            if [ "$APPROVAL_COUNT" -gt 0 ]; then
              # Check if any approvals are in "approved" state
              APPROVED_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '[.result[] | select(.state == "approved")] | length')
              REJECTED_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '[.result[] | select(.state == "rejected")] | length')
              
              echo "Approved: $APPROVED_COUNT, Rejected: $REJECTED_COUNT"
              
              if [ "$REJECTED_COUNT" -gt 0 ]; then
                echo "Change Request has rejected approvals"
                echo "BLOCKING DEPLOYMENT - CR has rejections"
                exit 1
              elif [ "$APPROVED_COUNT" -gt 0 ]; then
                echo "ServiceNow approval(s) verified for CR: $CR_NUMBER"
                echo "approved=true" >> $GITHUB_OUTPUT
                echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
                echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
                
                # Update GitHub PR with deployment status
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"body\": \"ServiceNow Change Request Approved & Deployment Started\n\n- **Change Request**: [$CR_NUMBER](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=$CR_SYS_ID)\n- **Status**: Approved\n- **Action**: Deployment in progress...\n\nDeployment pipeline has been triggered.\"}" \
                  "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"
              else
                echo "Change Request approvals are still pending"
                echo "BLOCKING DEPLOYMENT - CR requires approval"
                exit 1
              fi
            else
              # Fallback: Check CR state for auto-approved or approved states
              if [ "$CR_STATE" = "4" ] || [ "$CR_STATE" = "5" ] || [ "$CR_STATE" = "3" ] || [ "$CR_STATE" = "6" ]; then
                echo "ServiceNow CR in acceptable state for deployment: $CR_NUMBER (State: $CR_STATE)"
                echo "approved=true" >> $GITHUB_OUTPUT
                echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
                echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
              else
                echo "No approvals found and CR not in approved state"
                echo "BLOCKING DEPLOYMENT - CR requires approval"
                exit 1
              fi
            fi
          else
            echo "No ServiceNow Change Request found for PR #${{ github.event.number }}"
            echo "BLOCKING DEPLOYMENT - No valid Change Request found"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
          
      - name: Generate Version
        id: build
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Build Version: $VERSION"
          
      - name: Restore dependencies
        run: dotnet restore ./src/WeatherAPI/WeatherAPI.csproj
        
      - name: Build
        run: dotnet build ./src/WeatherAPI/WeatherAPI.csproj --no-restore --configuration Release
        
      - name: Run Unit Tests
        run: |
          echo "Running unit tests..."
          dotnet test ./tests/WeatherAPI.Tests/ --configuration Release --verbosity normal
          echo "All tests passed"
        
      - name: Publish Application
        run: dotnet publish ./src/WeatherAPI/WeatherAPI.csproj -c Release -o ./publish
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: ./publish
          
      - name: Post-Deployment Health Check
        run: |
          echo "Performing post-deployment health check..."
          sleep 15
          HEALTH_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health"
          echo "Checking: $HEALTH_URL"
          curl -f "$HEALTH_URL" || echo "Health check endpoint not responding yet"
          echo "Deployment completed"

  update-apim:
    name: Update API Management
    runs-on: ubuntu-latest
    needs: verify-and-deploy
    if: github.event.action == 'closed' && github.event.pull_request.merged == true && needs.verify-and-deploy.outputs.approved == 'true'

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Import API to APIM
      run: |
        echo "Importing API to Azure API Management..."
        
        az apim api import \
          --api-id "abbott-weather-api" \
          --service-name "abbott-apim-demo-02" \
          --resource-group "abbott-demo-rg" \
          --specification-format "OpenApi" \
          --specification-url "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/swagger/v1/swagger.json" \
          --path "weather" \
          --display-name "Abbott Weather API" \
          --protocols "https"
          
        echo "API imported to APIM successfully"

  deployment-complete:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [verify-and-deploy, update-apim]
    if: always() && needs.verify-and-deploy.result == 'success' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Get Extended Deployment Info
        id: extended-info
        run: |
          echo "build-number=${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_OUTPUT
          echo "deploy-time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "version=${{ needs.verify-and-deploy.outputs.version }}" >> $GITHUB_OUTPUT
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "pr-title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr-author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "app-service-url=https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" >> $GITHUB_OUTPUT
          echo "apim-gateway-url=https://abbott-apim-demo-02.azure-api.net/weather" >> $GITHUB_OUTPUT
          echo "workflow-run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
          echo "build-timestamp=$(date -u +"%Y%m%d-%H%M%S")" >> $GITHUB_OUTPUT

      - name: Update ServiceNow CR Status
        run: |
          echo "Updating ServiceNow CR: ${{ needs.verify-and-deploy.outputs.cr-number }}"
          
          # First, let's check the current state
          echo "Checking current CR state..."
          CURRENT_RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-and-deploy.outputs.cr-sys-id }}?sysparm_fields=state,number")
          
          CURRENT_STATE=$(echo "$CURRENT_RESPONSE" | jq -r '.result.state')
          echo "Current CR state: $CURRENT_STATE"
          
          # Step 1: Move CR to Implement state with deployment notes
          echo "Moving CR to Implement state..."
          IMPLEMENT_RESPONSE=$(curl -s -X PUT \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"state\": \"5\",
              \"work_notes\": \"Deployment completed successfully\\nVersion: ${{ needs.verify-and-deploy.outputs.version }}\\nDeployed to: ${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net\\nDeployment time: ${{ steps.extended-info.outputs.deploy-time }}\\nMerge commit: ${{ steps.extended-info.outputs.commit-sha }}\"
            }" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-and-deploy.outputs.cr-sys-id }}")
          
          echo "ServiceNow Implement Response: $IMPLEMENT_RESPONSE"
          
          # Check if state actually changed
          sleep 2
          VERIFY_RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-and-deploy.outputs.cr-sys-id }}?sysparm_fields=state,number")
          
          NEW_STATE=$(echo "$VERIFY_RESPONSE" | jq -r '.result.state')
          echo "State after Implement attempt: $NEW_STATE"
          
          if [ "$NEW_STATE" = "5" ]; then
            echo "CR successfully moved to Implement state"
            
            # Wait a moment between updates
            sleep 3
            
            # Step 2: Move CR to Review state
            echo "Moving CR to Review state for manual closure..."
            REVIEW_RESPONSE=$(curl -s -X PUT \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"state\": \"6\",
                \"work_notes\": \"Deployment implementation complete. Ready for review and closure.\"
              }" \
              "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-and-deploy.outputs.cr-sys-id }}")
            
            echo "ServiceNow Review Response: $REVIEW_RESPONSE"
            echo "CR moved to Review state successfully - ready for manual closure"
          else
            echo "State transition blocked by ServiceNow business rules"
            echo "Adding deployment notes without state change..."
            
            # Just add work notes without changing state
            curl -s -X PUT \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              -H "Content-Type: application/json" \
              -d "{
                \"work_notes\": \"Deployment completed successfully\\nVersion: ${{ needs.verify-and-deploy.outputs.version }}\\nDeployed to: ${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net\\nDeployment time: ${{ steps.extended-info.outputs.deploy-time }}\\nMerge commit: ${{ steps.extended-info.outputs.commit-sha }}\\n\\nNote: State transition blocked by business rules. Manual state progression required.\"
              }" \
              "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request/${{ needs.verify-and-deploy.outputs.cr-sys-id }}"
            
            echo "Deployment notes added. Manual state progression required in ServiceNow."
          fi

      - name: Update Confluence Documentation
        run: |
          echo "Updating Confluence documentation..."
          
          CONFLUENCE_USER="ahamed.musthafa@agilisium.com"
          CONFLUENCE_TOKEN="${{ secrets.CONFLUENCE_API_TOKEN }}"
          CONFLUENCE_URL="${{ secrets.CONFLUENCE_BASE_URL }}"
          PAGE_ID="${{ secrets.CONFLUENCE_PAGE_ID }}"
          
          # Get current page version
          CURRENT_VERSION=$(curl -s \
            -u "$CONFLUENCE_USER:$CONFLUENCE_TOKEN" \
            "$CONFLUENCE_URL/wiki/rest/api/content/$PAGE_ID?expand=version" \
            | jq '.version.number')
          
          NEW_VERSION=$((CURRENT_VERSION + 1))
          
          # Create Confluence storage format content
          CONFLUENCE_CONTENT='<h1>Abbott Weather API - Deployment Report</h1>
          <h2>Deployment Summary</h2>
          <p><strong>Status:</strong> <span style="color: green;">Completed Successfully</span><br/>
          <strong>Timestamp:</strong> ${{ steps.extended-info.outputs.deploy-time }}<br/>
          <strong>Version:</strong> ${{ steps.extended-info.outputs.version }}<br/>
          <strong>Build Number:</strong> ${{ steps.extended-info.outputs.build-number }}<br/>
          <strong>Deployed by:</strong> ${{ steps.extended-info.outputs.actor }}<br/>
          <strong>ServiceNow CR:</strong> ${{ needs.verify-and-deploy.outputs.cr-number }}<br/>
          <strong>PR Title:</strong> ${{ steps.extended-info.outputs.pr-title }}<br/>
          <strong>PR Author:</strong> ${{ steps.extended-info.outputs.pr-author }}</p>
          
          <h2>Infrastructure Details</h2>
          <p><strong>App Service:</strong> ${{ env.AZURE_WEBAPP_NAME }}<br/>
          <strong>Region:</strong> Central India<br/>
          <strong>App Service URL:</strong> <a href="${{ steps.extended-info.outputs.app-service-url }}">Live API</a><br/>
          <strong>API Gateway URL:</strong> <a href="${{ steps.extended-info.outputs.apim-gateway-url }}">Gateway</a></p>
          
          <h2>API Endpoints</h2>
          <ul>
          <li><a href="${{ steps.extended-info.outputs.app-service-url }}/health">Health Check</a></li>
          <li><a href="${{ steps.extended-info.outputs.app-service-url }}/swagger">API Documentation</a></li>
          <li><a href="${{ steps.extended-info.outputs.apim-gateway-url }}/api/Weather/forecast">Weather Forecast</a></li>
          <li>Current Weather: ${{ steps.extended-info.outputs.apim-gateway-url }}/api/Weather/current/{city}</li>
          </ul>
          
          <h2>Integration Workflow</h2>
          <p>This deployment followed the complete enterprise workflow:<br/>
          JIRA → GitHub PR → Security Scan → ServiceNow Approval → Merge & Deploy → APIM → Documentation</p>
          
          <p><em>Last updated: ${{ steps.extended-info.outputs.deploy-time }} by automated deployment pipeline</em></p>'
          
          # Create JSON payload file to avoid escaping issues
          cat > confluence_payload.json << EOF
          {
            "version": {"number": $NEW_VERSION},
            "title": "Abbott API Documentation",
            "type": "page",
            "body": {
              "storage": {
                "value": $(echo "$CONFLUENCE_CONTENT" | jq -Rs .),
                "representation": "storage"
              }
            }
          }
          EOF
          
          # Update Confluence page
          RESPONSE=$(curl -w "%{http_code}" -s \
            -u "$CONFLUENCE_USER:$CONFLUENCE_TOKEN" \
            -X PUT \
            -H "Content-Type: application/json" \
            -d @confluence_payload.json \
            "$CONFLUENCE_URL/wiki/rest/api/content/$PAGE_ID")
          
          HTTP_CODE="${RESPONSE: -3}"
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Confluence documentation updated successfully"
          else
            echo "Confluence update failed but deployment succeeded"
            echo "HTTP code: $HTTP_CODE"
          fi
          
          rm confluence_payload.json

      - name: Update JIRA Ticket with Confluence Link
        run: |
          echo "Updating JIRA ticket with deployment documentation..."
          
          # Extract JIRA ticket from PR title, branch name, or commit message
          JIRA_KEY=""
          
          # Try PR title first
          JIRA_FROM_TITLE=$(echo "${{ steps.extended-info.outputs.pr-title }}" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          
          # Try branch name if not found in title
          if [ -z "$JIRA_FROM_TITLE" ]; then
            JIRA_FROM_BRANCH=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oE '[A-Z]+-[0-9]+' | head -1)
            JIRA_KEY="$JIRA_FROM_BRANCH"
          else
            JIRA_KEY="$JIRA_FROM_TITLE"
          fi
          
          if [ -z "$JIRA_KEY" ]; then
            echo "No JIRA ticket found in PR title or branch name"
            echo "PR title: ${{ steps.extended-info.outputs.pr-title }}"
            echo "Branch: ${{ github.event.pull_request.head.ref }}"
            echo "Tip: Include JIRA key (e.g., SCRUM-123) in PR titles or branch names"
          else
            echo "Found JIRA ticket: $JIRA_KEY"
            
            # Update JIRA ticket with deployment info and Confluence link
            JIRA_COMMENT='{
              "body": {
                "type": "doc",
                "version": 1,
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Deployment Completed Successfully!"
                      }
                    ]
                  },
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": "Details:"
                      }
                    ]
                  },
                  {
                    "type": "bulletList",
                    "content": [
                      {
                        "type": "listItem",
                        "content": [
                          {
                            "type": "paragraph",
                            "content": [
                              {
                                "type": "text",
                                "text": "Version: ${{ steps.extended-info.outputs.version }}"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "listItem",
                        "content": [
                          {
                            "type": "paragraph",
                            "content": [
                              {
                                "type": "text",
                                "text": "ServiceNow CR: ${{ needs.verify-and-deploy.outputs.cr-number }}"
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "listItem",
                        "content": [
                          {
                            "type": "paragraph",
                            "content": [
                              {
                                "type": "text",
                                "text": "Live URL: "
                              },
                              {
                                "type": "text",
                                "text": "${{ steps.extended-info.outputs.app-service-url }}",
                                "marks": [
                                  {
                                    "type": "link",
                                    "attrs": {
                                      "href": "${{ steps.extended-info.outputs.app-service-url }}"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "type": "listItem",
                        "content": [
                          {
                            "type": "paragraph",
                            "content": [
                              {
                                "type": "text",
                                "text": "Documentation: "
                              },
                              {
                                "type": "text",
                                "text": "Abbott API Documentation",
                                "marks": [
                                  {
                                    "type": "link",
                                    "attrs": {
                                      "href": "${{ secrets.CONFLUENCE_BASE_URL }}/wiki/spaces/ABBOTT/pages/${{ secrets.CONFLUENCE_PAGE_ID }}"
                                    }
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            }'
            
            # Post comment to JIRA
            JIRA_RESPONSE=$(curl -w "%{http_code}" -s \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -X POST \
              -H "Content-Type: application/json" \
              -d "$JIRA_COMMENT" \
              "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_KEY/comment")
            
            HTTP_CODE="${JIRA_RESPONSE: -3}"
            if [ "$HTTP_CODE" = "201" ]; then
              echo "JIRA ticket $JIRA_KEY updated with deployment info and Confluence link"
            else
              echo "JIRA update failed but deployment succeeded"
              echo "HTTP code: $HTTP_CODE"
            fi
            
            # Transition JIRA ticket to Review status
            echo "Moving JIRA ticket to Review status..."
            JIRA_TRANSITION_RESPONSE=$(curl -w "%{http_code}" -s \
              -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{"transition": {"id": "21"}}' \
              "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_KEY/transitions")
            
            JIRA_TRANSITION_HTTP_CODE="${JIRA_TRANSITION_RESPONSE: -3}"
            if [ "$JIRA_TRANSITION_HTTP_CODE" = "204" ]; then
              echo "JIRA ticket $JIRA_KEY moved to Review status successfully"
            else
              echo "JIRA transition failed (HTTP: $JIRA_TRANSITION_HTTP_CODE) - trying alternative transition ID"
              echo "Response: $JIRA_TRANSITION_RESPONSE"
              
              # Try alternative transition ID for Review
              curl -s \
                -u "${{ secrets.JIRA_EMAIL }}:${{ secrets.JIRA_API_TOKEN }}" \
                -X POST \
                -H "Content-Type: application/json" \
                -d '{"transition": {"id": "31"}}' \
                "${{ secrets.JIRA_BASE_URL }}/rest/api/3/issue/$JIRA_KEY/transitions" || echo "Alternative transition also failed"
            fi
          fi

      - name: Send Slack Notification
        run: |
          echo "Sending deployment notification to Slack..."
          
          # Extract JIRA ticket from PR title or branch
          JIRA_KEY=""
          JIRA_FROM_TITLE=$(echo "${{ steps.extended-info.outputs.pr-title }}" | grep -oE '[A-Z]+-[0-9]+' | head -1)
          
          if [ -z "$JIRA_FROM_TITLE" ]; then
            JIRA_FROM_BRANCH=$(echo "${{ github.event.pull_request.head.ref }}" | grep -oE '[A-Z]+-[0-9]+' | head -1)
            JIRA_KEY="$JIRA_FROM_BRANCH"
          else
            JIRA_KEY="$JIRA_FROM_TITLE"
          fi
          
          if [ -z "$JIRA_KEY" ]; then
            JIRA_KEY="Not specified"
          fi
          
          # Create enhanced Slack webhook message with images
          SLACK_MESSAGE='{
            "text": "Abbott API Deployment Completed Successfully",
            "blocks": [
              {
                "type": "header",
                "text": {
                  "type": "plain_text",
                  "text": "Abbott API Deployment Complete",
                  "emoji": true
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":white_check_mark: *Deployment Status: SUCCESS*\n:rocket: Abbott Weather API has been successfully deployed to production!"
                },
                "accessory": {
                  "type": "image",
                  "image_url": "https://img.icons8.com/color/96/000000/checked-2.png",
                  "alt_text": "Success"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*Version:*\n${{ steps.extended-info.outputs.version }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Build:*\n#${{ steps.extended-info.outputs.build-number }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*ServiceNow CR:*\n${{ needs.verify-and-deploy.outputs.cr-number }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Deploy Time:*\n${{ steps.extended-info.outputs.deploy-time }}"
                  }
                ]
              },
              {
                "type": "section",
                "fields": [
                  {
                    "type": "mrkdwn",
                    "text": "*PR Details:*\n#${{ github.event.number }} - ${{ steps.extended-info.outputs.pr-title }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*JIRA Ticket:*\n'"$JIRA_KEY"'"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Author:*\n${{ steps.extended-info.outputs.pr-author }}"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "*Commit:*\n`${{ steps.extended-info.outputs.commit-sha }}`"
                  }
                ]
              },
              {
                "type": "divider"
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "*:link: Quick Access Links:*"
                },
                "accessory": {
                  "type": "image",
                  "image_url": "https://img.icons8.com/fluency/48/000000/api.png",
                  "alt_text": "API"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": ":globe_with_meridians: <${{ steps.extended-info.outputs.app-service-url }}|Live API> | :gear: <${{ steps.extended-info.outputs.apim-gateway-url }}|API Gateway> | :page_facing_up: <${{ steps.extended-info.outputs.app-service-url }}/swagger|Swagger UI>\n:stethoscope: <${{ steps.extended-info.outputs.app-service-url }}/health|Health Check> | :books: <${{ secrets.CONFLUENCE_BASE_URL }}/wiki/spaces/ABBOTT/pages/${{ secrets.CONFLUENCE_PAGE_ID }}|Documentation> | :clipboard: <${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=${{ needs.verify-and-deploy.outputs.cr-sys-id }}|ServiceNow CR>"
                }
              },
              {
                "type": "divider"
              },
              {
                "type": "context",
                "elements": [
                  {
                    "type": "image",
                    "image_url": "https://img.icons8.com/color/24/000000/github.png",
                    "alt_text": "GitHub"
                  },
                  {
                    "type": "mrkdwn",
                    "text": "Deployed by *${{ steps.extended-info.outputs.actor }}* | Abbott API Modernization Project | Build: ${{ steps.extended-info.outputs.build-timestamp }}"
                  }
                ]
              }
            ],
            "attachments": [
              {
                "color": "good",
                "fields": [
                  {
                    "title": "Deployment Pipeline Status",
                    "value": ":white_check_mark: Security Scan\n:white_check_mark: Build & Test\n:white_check_mark: ServiceNow Approval\n:white_check_mark: Azure Deploy\n:white_check_mark: APIM Update\n:white_check_mark: Documentation Updated",
                    "short": true
                  },
                  {
                    "title": "Environment Details",
                    "value": ":cloud: Azure App Service\n:round_pushpin: Central India\n:shield: Production Environment\n:chart_with_upwards_trend: Auto-scaling Enabled",
                    "short": true
                  }
                ]
              }
            ]
          }'
          
          # Send to Slack webhook
          SLACK_RESPONSE=$(curl -w "%{http_code}" -s \
            -X POST \
            -H "Content-Type: application/json" \
            -d "$SLACK_MESSAGE" \
            "${{ secrets.SLACK_WEBHOOK_URL }}")
          
          HTTP_CODE="${SLACK_RESPONSE: -3}"
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Slack notification sent successfully"
          else
            echo "Slack notification failed (HTTP: $HTTP_CODE)"
            echo "Response: $SLACK_RESPONSE"
          fi

      - name: Update GitHub PR with Final Status
        run: |
          echo "Updating GitHub PR with final deployment status..."
          
          # Post final deployment completion comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"body\": \"## 🎉 Deployment Completed Successfully!\n\n**Abbott Weather API v${{ steps.extended-info.outputs.version }}** has been deployed to production.\n\n### 📊 Deployment Summary\n- **ServiceNow CR**: [${{ needs.verify-and-deploy.outputs.cr-number }}](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=${{ needs.verify-and-deploy.outputs.cr-sys-id }}) ✅ Ready for Review\n- **Build**: #${{ steps.extended-info.outputs.build-number }}\n- **Deployed by**: ${{ steps.extended-info.outputs.actor }}\n- **Timestamp**: ${{ steps.extended-info.outputs.deploy-time }}\n\n### 🔗 Live Environment\n- [Live API](${{ steps.extended-info.outputs.app-service-url }}) 🌐\n- [API Gateway](${{ steps.extended-info.outputs.apim-gateway-url }}) ⚡\n- [Swagger Documentation](${{ steps.extended-info.outputs.app-service-url }}/swagger) 📚\n- [Health Check](${{ steps.extended-info.outputs.app-service-url }}/health) 💚\n\n### 📝 Documentation\n- [Confluence Documentation](${{ secrets.CONFLUENCE_BASE_URL }}/wiki/spaces/ABBOTT/pages/${{ secrets.CONFLUENCE_PAGE_ID }}) has been updated\n- JIRA ticket updated with deployment details\n\n**Status**: ✅ **DEPLOYMENT SUCCESSFUL** ✅\"
            }" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"

      - name: Deployment Success Summary
        run: |
          echo "Abbott API Deployment Pipeline Completed Successfully!"
          echo "================================================================"
          echo ""
          echo "Deployment Summary:"
          echo "  Security Scan: Passed"
          echo "  Build & Test: Success"
          echo "  ServiceNow CR: ${{ needs.verify-and-deploy.outputs.cr-number }}"
          echo "  ServiceNow Approval: Verified"
          echo "  Azure Deployment: Success"
          echo "  APIM Update: Complete"
          echo "  Version: ${{ steps.extended-info.outputs.version }}"
          echo ""
          echo "Live Endpoints:"
          echo "  Swagger UI: ${{ steps.extended-info.outputs.app-service-url }}/swagger"
          echo "  Health Check: ${{ steps.extended-info.outputs.app-service-url }}/health"
          echo "  API Gateway: ${{ steps.extended-info.outputs.apim-gateway-url }}"
          echo ""
          echo "Abbott API Modernization: DEPLOYMENT SUCCESSFUL!"