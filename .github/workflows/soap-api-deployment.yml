name: Abbott SOAP API Demo Pipeline

on:
  workflow_dispatch:
    inputs:
      soap_wsdl_url:
        description: 'SOAP WSDL URL'
        required: false
        default: 'http://www.dneonline.com/calculator.asmx?wsdl'
      api_path:
        description: 'API Path in APIM'
        required: false
        default: 'calculator'
      create_servicenow_cr:
        description: 'Create ServiceNow Change Request'
        required: false
        default: 'true'
        type: boolean
  pull_request:
    branches: [ main ]  # Only trigger for PRs to main branch
    types: [opened, synchronize, reopened, closed]

permissions:
  issues: write
  pull-requests: write
  contents: read

env:
  SOAP_WSDL_URL: ${{ github.event.inputs.soap_wsdl_url || 'http://www.dneonline.com/calculator.asmx?wsdl' }}
  API_PATH: ${{ github.event.inputs.api_path || 'calculator' }}
  APIM_SERVICE_NAME: 'abbott-apim-demo-04'
  RESOURCE_GROUP: 'abbott-demo-rg'

jobs:
  security-scan:
    name: Security & Validation
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.action != 'closed'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Validate SOAP WSDL
        run: |
          echo "Validating SOAP WSDL URL: ${{ env.SOAP_WSDL_URL }}"
          curl -f -s "${{ env.SOAP_WSDL_URL }}" > /dev/null && echo "WSDL is accessible" || exit 1
          echo "WSDL validation completed"

  create-servicenow-cr:
    name: Create ServiceNow Change Request
    runs-on: ubuntu-latest
    needs: security-scan
    if: github.event.action == 'opened' || github.event.action == 'reopened'
    outputs:
      cr-number: ${{ steps.create-cr.outputs.cr-number }}
      cr-sys-id: ${{ steps.create-cr.outputs.cr-sys-id }}
    
    steps:
      - name: Lookup Assignment Group sys_id
        id: lookup-group
        run: |
          echo "Looking up Change Management group..."
          GROUP_RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/sys_user_group?sysparm_query=name=Change%20Management&sysparm_fields=sys_id,name")
          
          echo "Group lookup response: $GROUP_RESPONSE"
          GROUP_SYS_ID=$(echo "$GROUP_RESPONSE" | jq -r '.result[0].sys_id // empty')
          
          if [ -z "$GROUP_SYS_ID" ] || [ "$GROUP_SYS_ID" = "null" ]; then
            echo "Change Management group not found, will use group name instead"
            echo "group_sys_id=" >> $GITHUB_OUTPUT
          else
            echo "Found group sys_id: $GROUP_SYS_ID"
            echo "group_sys_id=$GROUP_SYS_ID" >> $GITHUB_OUTPUT
          fi

      - name: Lookup Assigned To sys_id
        id: lookup-user
        run: |
          echo "Looking up Change Manager user..."
          USER_RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/sys_user?sysparm_query=name=Change%20Manager^ORuser_name=Change%20Manager&sysparm_fields=sys_id,name,user_name")
          
          echo "User lookup response: $USER_RESPONSE"
          USER_SYS_ID=$(echo "$USER_RESPONSE" | jq -r '.result[0].sys_id // empty')
          
          if [ -z "$USER_SYS_ID" ] || [ "$USER_SYS_ID" = "null" ]; then
            echo "Change Manager user not found, will use username instead"
            echo "user_sys_id=" >> $GITHUB_OUTPUT
          else
            echo "Found user sys_id: $USER_SYS_ID"
            echo "user_sys_id=$USER_SYS_ID" >> $GITHUB_OUTPUT
          fi

      - name: Create ServiceNow Change Request
        id: create-cr
        run: |
          echo "Creating ServiceNow Change Request for SOAP API deployment..."
          
          # Use sys_id if available, otherwise use name
          if [ -n "${{ steps.lookup-group.outputs.group_sys_id }}" ]; then
            ASSIGNMENT_GROUP="${{ steps.lookup-group.outputs.group_sys_id }}"
          else
            ASSIGNMENT_GROUP="Change Management"
          fi
          
          if [ -n "${{ steps.lookup-user.outputs.user_sys_id }}" ]; then
            ASSIGNED_TO="${{ steps.lookup-user.outputs.user_sys_id }}"
          else
            ASSIGNED_TO="Change Manager"
          fi
          
          # Handle manual dispatch vs PR context
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            PR_NUMBER="Manual-${{ github.run_number }}"
            DESCRIPTION="Manual SOAP API deployment request\\nWSDL URL: ${{ env.SOAP_WSDL_URL }}\\nAPI Path: ${{ env.API_PATH }}\\nTriggered by: ${{ github.actor }}\\nWorkflow: ${{ github.workflow }}\\nRun ID: ${{ github.run_id }}"
          else
            PR_NUMBER="${{ github.event.number }}"
            DESCRIPTION="Automated SOAP API deployment request\\nRepository: ${{ github.repository }}\\nPR: ${{ github.event.pull_request.title }}\\nBranch: ${{ github.event.pull_request.head.ref }}\\nAuthor: ${{ github.event.pull_request.user.login }}\\nCommit: ${{ github.event.pull_request.head.sha }}\\nPR URL: ${{ github.event.pull_request.html_url }}\\nWSDL URL: ${{ env.SOAP_WSDL_URL }}"
          fi
          
          echo "Using assignment_group: $ASSIGNMENT_GROUP"
          echo "Using assigned_to: $ASSIGNED_TO"
          
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"short_description\": \"Deploy Abbott SOAP API - $PR_NUMBER\",
              \"description\": \"$DESCRIPTION\",
              \"category\": \"Software\",
              \"priority\": \"3\",
              \"risk\": \"3\",
              \"state\": \"1\",
              \"type\": \"normal\",
              \"requested_by\": \"${{ secrets.SERVICENOW_USERNAME }}\",
              \"assignment_group\": \"$ASSIGNMENT_GROUP\",
              \"assigned_to\": \"$ASSIGNED_TO\",
              \"approval\": \"requested\",
              \"u_commit_sha\": \"${{ github.sha }}\",
              \"u_pr_number\": \"$PR_NUMBER\"
            }" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request")
          
          # Extract HTTP status and body
          HTTP_STATUS=$(echo "$RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
          RESPONSE_BODY=$(echo "$RESPONSE" | sed 's/HTTPSTATUS:[0-9]*$//')
          
          echo "ServiceNow HTTP Status: $HTTP_STATUS"
          
          if [ "$HTTP_STATUS" != "201" ]; then
            echo "ServiceNow API call failed with HTTP status: $HTTP_STATUS"
            echo "Full response: $RESPONSE_BODY"
            exit 1
          fi
          
          CR_NUMBER=$(echo "$RESPONSE_BODY" | jq -r '.result.number')
          CR_SYS_ID=$(echo "$RESPONSE_BODY" | jq -r '.result.sys_id')
          
          echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
          echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
          
          echo "ServiceNow Change Request created: $CR_NUMBER"

          # Add comment to PR
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "{\"body\": \"ServiceNow Change Request Created\n\n- **Change Request**: [$CR_NUMBER](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=$CR_SYS_ID)\n- **Status**: Waiting for approval\n\nPlease approve in ServiceNow before merging this PR.\"}" \
              "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"
          fi

  verify-and-deploy:
    name: Verify Approval & Deploy SOAP API
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    outputs:
      cr-number: ${{ steps.verify-approval.outputs.cr-number }}
      cr-sys-id: ${{ steps.verify-approval.outputs.cr-sys-id }}
      approved: ${{ steps.verify-approval.outputs.approved }}
      version: ${{ steps.build.outputs.version }}
    
    steps:
      - name: Verify ServiceNow Approval
        id: verify-approval
        run: |
          echo "Verifying ServiceNow approval for PR #${{ github.event.number }}..."
          
          # Search for CR by PR number
          RESPONSE=$(curl -s \
            -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
            "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/change_request?sysparm_query=u_pr_number=${{ github.event.number }}^short_descriptionCONTAINSSOAP%20API^ORDERBYDESCsys_created_on&sysparm_limit=1")
          
          CR_COUNT=$(echo "$RESPONSE" | jq '.result | length')
          echo "Found $CR_COUNT CR(s) for PR #${{ github.event.number }}"
          
          if [ "$CR_COUNT" -gt 0 ]; then
            CR_NUMBER=$(echo "$RESPONSE" | jq -r '.result[0].number')
            CR_SYS_ID=$(echo "$RESPONSE" | jq -r '.result[0].sys_id')
            CR_STATE=$(echo "$RESPONSE" | jq -r '.result[0].state')
            
            echo "Found Change Request: $CR_NUMBER"
            echo "State: $CR_STATE"
            
            # Check approvals for this CR
            APPROVAL_RESPONSE=$(curl -s \
              -u "${{ secrets.SERVICENOW_USERNAME }}:${{ secrets.SERVICENOW_PASSWORD }}" \
              "${{ secrets.SERVICENOW_INSTANCE }}/api/now/table/sysapproval_approver?sysparm_query=document_id=$CR_SYS_ID")
            
            APPROVAL_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '.result | length')
            echo "Found $APPROVAL_COUNT approval record(s)"
            
            if [ "$APPROVAL_COUNT" -gt 0 ]; then
              # Check if any approvals are in "approved" state
              APPROVED_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '[.result[] | select(.state == "approved")] | length')
              REJECTED_COUNT=$(echo "$APPROVAL_RESPONSE" | jq '[.result[] | select(.state == "rejected")] | length')
              
              echo "Approved: $APPROVED_COUNT, Rejected: $REJECTED_COUNT"
              
              if [ "$REJECTED_COUNT" -gt 0 ]; then
                echo "Change Request has rejected approvals"
                echo "BLOCKING DEPLOYMENT - CR has rejections"
                exit 1
              elif [ "$APPROVED_COUNT" -gt 0 ]; then
                echo "ServiceNow approval(s) verified for CR: $CR_NUMBER"
                echo "approved=true" >> $GITHUB_OUTPUT
                echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
                echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
                
                # Update GitHub PR with deployment status
                curl -X POST \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "Content-Type: application/json" \
                  -d "{\"body\": \"ServiceNow Change Request Approved & SOAP API Deployment Started\n\n- **Change Request**: [$CR_NUMBER](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=$CR_SYS_ID)\n- **Status**: Approved\n- **Action**: SOAP API deployment in progress...\n\nAPI Management deployment pipeline has been triggered.\"}" \
                  "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"
              else
                echo "Change Request approvals are still pending"
                echo "BLOCKING DEPLOYMENT - CR requires approval"
                exit 1
              fi
            else
              # Fallback: Check CR state for auto-approved or approved states
              if [ "$CR_STATE" = "4" ] || [ "$CR_STATE" = "5" ] || [ "$CR_STATE" = "3" ] || [ "$CR_STATE" = "6" ]; then
                echo "ServiceNow CR in acceptable state for deployment: $CR_NUMBER (State: $CR_STATE)"
                echo "approved=true" >> $GITHUB_OUTPUT
                echo "cr-number=$CR_NUMBER" >> $GITHUB_OUTPUT
                echo "cr-sys-id=$CR_SYS_ID" >> $GITHUB_OUTPUT
              else
                echo "No approvals found and CR not in approved state"
                echo "BLOCKING DEPLOYMENT - CR requires approval"
                exit 1
              fi
            fi
          else
            echo "No ServiceNow Change Request found for PR #${{ github.event.number }}"
            echo "BLOCKING DEPLOYMENT - No valid Change Request found"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
          
      - name: Generate Version
        id: build
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "SOAP API Version: $VERSION"
          
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

  deploy-soap-api:
    name: Deploy SOAP API to APIM
    runs-on: ubuntu-latest
    needs: verify-and-deploy
    if: github.event.action == 'closed' && github.event.pull_request.merged == true && needs.verify-and-deploy.outputs.approved == 'true'
    outputs:
      api-gateway-url: ${{ steps.deploy-api.outputs.api-gateway-url }}
      soap-endpoint: ${{ steps.deploy-api.outputs.soap-endpoint }}
      api-operations: ${{ steps.deploy-api.outputs.api-operations }}

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy SOAP API to APIM
      id: deploy-api
      run: |
        echo "Deploying SOAP API to Azure API Management..."
        
        API_ID="soap-${{ env.API_PATH }}-api"
        APIM_GATEWAY_URL="https://${{ env.APIM_SERVICE_NAME }}.azure-api.net"
        API_ENDPOINT="$APIM_GATEWAY_URL/${{ env.API_PATH }}"
        
        echo "Using SOAP WSDL: ${{ env.SOAP_WSDL_URL }}"
        echo "APIM Service: ${{ env.APIM_SERVICE_NAME }}"
        echo "API Path: /${{ env.API_PATH }}"
        echo "API ID: $API_ID"
        
        # Import with explicit service + endpoint names to resolve multiple endpoint issue
        echo "Importing SOAP API with specific service and endpoint names..."
        az apim api import \
          --api-id "$API_ID" \
          --service-name "${{ env.APIM_SERVICE_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --specification-format "Wsdl" \
          --specification-url "${{ env.SOAP_WSDL_URL }}" \
          --path "${{ env.API_PATH }}" \
          --display-name "Calculator SOAP API" \
          --protocols "https" \
          --soap-api-type "SoapToRest" \
          --wsdl-service-name "Calculator" \
          --wsdl-endpoint-name "CalculatorSoap"
        
        echo "api-gateway-url=$APIM_GATEWAY_URL" >> $GITHUB_OUTPUT
        echo "soap-endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
        
        echo "API Gateway URL: $APIM_GATEWAY_URL"
        echo "SOAP API Endpoint: $API_ENDPOINT"
        echo "SOAP API imported successfully"

    - name: List API Operations
      run: |
        echo "Listing available API operations..."
        
        API_ID="soap-${{ env.API_PATH }}-api"
        
        # Get operations list for output
        OPERATIONS=$(az apim api operation list \
          --api-id "$API_ID" \
          --service-name "${{ env.APIM_SERVICE_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query '[].displayName' \
          --output tsv | tr '\n' ',' | sed 's/,$//')
        
        echo "Available Operations: $OPERATIONS"
        
        # Display detailed operations table
        az apim api operation list \
          --api-id "$API_ID" \
          --service-name "${{ env.APIM_SERVICE_NAME }}" \
          --resource-group "${{ env.RESOURCE_GROUP }}" \
          --query '[].{Name:displayName, Method:method, UrlTemplate:urlTemplate}' \
          --output table
        
        # Test API connectivity
        echo "Testing API Gateway connectivity..."
        curl -f -s "${{ steps.deploy-api.outputs.api-gateway-url }}" > /dev/null && echo "API Gateway is accessible" || echo "Warning: API Gateway connectivity test failed"
        
        echo "SOAP API deployment to APIM completed successfully"

  deployment-complete:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [verify-and-deploy, deploy-soap-api]
    if: always() && needs.deploy-soap-api.result == 'success' && github.event.action == 'closed' && github.event.pull_request.merged == true
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Get Extended Deployment Info
        id: extended-info
        run: |
          echo "build-number=${{ github.run_number }}" >> $GITHUB_OUTPUT
          echo "commit-sha=${{ github.event.pull_request.merge_commit_sha }}" >> $GITHUB_OUTPUT
          echo "deploy-time=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_OUTPUT
          echo "version=${{ needs.verify-and-deploy.outputs.version }}" >> $GITHUB_OUTPUT
          echo "actor=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "repository=${{ github.repository }}" >> $GITHUB_OUTPUT
          echo "pr-title=${{ github.event.pull_request.title }}" >> $GITHUB_OUTPUT
          echo "pr-author=${{ github.event.pull_request.user.login }}" >> $GITHUB_OUTPUT
          echo "api-gateway-url=${{ needs.deploy-soap-api.outputs.api-gateway-url }}" >> $GITHUB_OUTPUT
          echo "soap-endpoint=${{ needs.deploy-soap-api.outputs.soap-endpoint }}" >> $GITHUB_OUTPUT
          echo "workflow-run-id=${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Update GitHub PR with Final Status
        run: |
          echo "Updating GitHub PR with final SOAP API deployment status..."
          
          # Post final deployment completion comment to PR
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"body\": \"## SOAP API Deployment Completed Successfully!\n\n**Abbott Calculator SOAP API v${{ steps.extended-info.outputs.version }}** has been deployed to Azure API Management.\n\n### Deployment Summary\n- **ServiceNow CR**: [${{ needs.verify-and-deploy.outputs.cr-number }}](${{ secrets.SERVICENOW_INSTANCE }}/nav_to.do?uri=change_request.do?sys_id=${{ needs.verify-and-deploy.outputs.cr-sys-id }}) Ready for Review\n- **Build**: #${{ steps.extended-info.outputs.build-number }}\n- **Deployed by**: ${{ steps.extended-info.outputs.actor }}\n- **Timestamp**: ${{ steps.extended-info.outputs.deploy-time }}\n\n### SOAP API Endpoints\n- [API Gateway](${{ steps.extended-info.outputs.api-gateway-url }})\n- [SOAP Endpoint](${{ steps.extended-info.outputs.soap-endpoint }})\n\n**Status**: SOAP API DEPLOYMENT SUCCESSFUL\"
            }" \
            "${{ github.api_url }}/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments"

      - name: Deployment Success Summary
        run: |
          echo "Abbott SOAP API Deployment Pipeline Completed Successfully!"
          echo "================================================================"
          echo ""
          echo "Deployment Summary:"
          echo "  Security Scan: Passed"
          echo "  ServiceNow CR: ${{ needs.verify-and-deploy.outputs.cr-number }}"
          echo "  ServiceNow Approval: Verified"
          echo "  SOAP API Import: Success"
          echo "  APIM Configuration: Complete"
          echo "  Version: ${{ steps.extended-info.outputs.version }}"
          echo ""
          echo "API Endpoints:"
          echo "  API Gateway: ${{ steps.extended-info.outputs.api-gateway-url }}"
          echo "  SOAP Endpoint: ${{ steps.extended-info.outputs.soap-endpoint }}"
          echo ""
          echo "Abbott Calculator SOAP API Modernization: DEPLOYMENT SUCCESSFUL!"